Method Overloading.
If a class has multiple methods having same name but different in parameters, it is known as Method Overloading.

There are two ways to overload the method in java
By changing number of arguments
By changing the data type

Here, complier differentiate methods with same within the same class based on the no. of arguments and their type & as it happens at run time therefore it is AKA Compile-Time Polymorphism.

Q) Why Method Overloading is not possible by changing the return type of method only?
In java, method overloading is not possible by changing the return type of the method only because of ambiguity. Let's see how ambiguity may occur:
class Adder{  
	static int add(int a,int b){return a+b;}  
	static double add(int a,int b){return a+b;}  
}  
class TestOverloading3{  
	public static void main(String[] args){  
		System.out.println(Adder.add(11,11));//ambiguity  
	}
}  

Output:
Compile Time Error: method add(int,int) is already defined in class Adder

Can we overload java main() method?
Yes, by method overloading. You can have any number of main methods in a class by method overloading. But JVM calls main() method which receives string array as arguments only. Let's see the simple example:
class TestOverloading4{  
	public static void main(String[] args){System.out.println("main with String[]");}  
	public static void main(String args){System.out.println("main with String");}  
	public static void main(){System.out.println("main without args");}  
}  
Test it Now
Output:
main with String[]

Method Overriding in Java
If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java.

Rules for Java Method Overriding
The method must have the same name as in the parent class
The method must have the same parameter as in the parent class.
There must be an IS-A relationship (inheritance).

Can we override java main method?
No, because the main is a static method.
########################################################################
Super Keyword in Java
The super keyword in Java is a reference variable which is used to refer immediate parent class object.
Usage of Java super Keyword
super can be used to refer immediate parent class instance variable.
super can be used to invoke immediate parent class method.
super() can be used to invoke immediate parent class constructor.
########################################################################
final keyword in java
The final keyword in java is used to restrict the user. The java final keyword can be used in many context. Final can be:
variable
method
class

If you make any variable as final, you cannot change the value of final variable(It will be constant).
If you make any method as final, you cannot override it.
If you make any class as final, you cannot extend it.

Is final method inherited?
Ans) Yes, final method is inherited but you cannot override it. For Example:

class Bike{  
  final void run(){System.out.println("running...");}  
}  
class Honda2 extends Bike{  
   public static void main(String args[]){  
    new Honda2().run();  
   }  
}  
Test it Now
Output:running...

Q) What is blank or uninitialized final variable?
A final variable that is not initialized at the time of declaration is known as blank final variable.
If you want to create a variable that is initialized at the time of creating object and once initialized may not be changed, it is useful. For example PAN CARD number of an employee.
It can be initialized only in constructor.

Que) Can we initialize blank final variable?
Yes, but only in constructor. For example:
class Bike10{  
  final int speedlimit;//blank final variable  
    
  Bike10(){  
	  speedlimit=70;  
	  System.out.println(speedlimit);  
  }  
  
  public static void main(String args[]){  
    new Bike10();  
 }  
}  
Output: 70

static blank final variable
A static final variable that is not initialized at the time of declaration is known as static blank final variable. It can be initialized only in static block.
Example of static blank final variable
class A{  
  static final int data;//static blank final variable  
  static{ data=50;}  
  public static void main(String args[]){  
    System.out.println(A.data);  
 }  
}

Q) Can we declare a constructor final?
No, because constructor itself is never inherited.
########################################################################
